CS50 Week 8 Notes

PHP BASICS

#!/usr/bin/env php
<?php

    printf(hello, world\n);

?>
In line 1, we are telling the operating system to find the interpreter for PHP, wherever it is.

In line 2, we are writing a PHP start tag that means this is the beginning of PHP code.

In line 4, we can write a printf statement that looks suspiciously like C.

And in line 6, weâ€™re simply telling the interpreter, this is the end of our PHP code.

PHP does not need to be compiled so no need to pass arguments to a compiler. The interpreter handles it all. Also there is no need to add libraries for basic data types or to get input from the user as this is included in the language.

#!/usr/bin/env php
<?php
These two lines at the top of a file define php so that the code will be paseed to the interpreter.

HASH TABLE PHP

A hash table can be declared like this:

<?php
	$size = 0;
	$table = [];

To load in php:

function load($dictionary)
{
		// We have to specify global with variables we want to use outside of our function.
		global $size;
		global $table;

		// returns the dictionary file as an array of strings (word) and iterates over each element.
		foreach(file($dictionary) as $word)
		{
			// chop gets rid of whitespace or newline characters.
			$table[chop($word)] = true;
			$size++;
		}
		return true;
}

function size()
{
	global $size;
	return size;
}

function check($word)
{
	// if there is a value for word in the global table set it to lower case and then return true
	global $table;
	return isset($table[strtolower($word)]);
}

Memory management is handled for you in PHP but it comes at a heavy price in speed.

PHP FOR THE WEB

get method puts request information in the URL. Post sends it a different way and is better for information that needs to be secure. An example of this in a html page would be: <form action=register-0.php method=post>

<?php print_r($_POST); ?>
The above line recursively prints out the post variable.

You can index into this variable with key names. It is a dictionary.

PHP is used with HTML like this:

<!DOCTYPE html>

<html>
    <head>
        <title>Frosh IMs</title>
    </head>
    <body>
        <pre>
            <?php print_r($_POST); ?>
        </pre>
    </body>
</html>

Here is code that will send an email to a person registering.

<?php

    // require PHPMailer. This is like include for c and adds the mailer library.
    require(libphp-phpmailer/class.phpmailer.php);

	// validate submission by checking if any fields are empty
    if (!empty($_POST[name]) && !empty($_POST[gender]) && !empty($_POST[dorm]))
    {
        // instantiate mailer object.
        $mail = new PHPMailer();

        // Configure communication protocol, host server, port to use and security protocol. In this case the information was gained from HUIT helpdesk.
        // use SMTP
        $mail->IsSMTP();
        $mail->Host = smtp.fas.harvard.edu;
        $mail->Port = 587;
        $mail->SMTPSecure = tls;

        // set From:
        $mail->SetFrom(jharvard@cs50.harvard.edu);

        // set To:
        $mail->AddAddress(jharvard@cs50.harvard.edu);

        // set Subject:
        $mail->Subject = registration;

        // set body. The . operator is for concatenating strings.
        $mail->Body =
            This person just registered:\n\n .
            Name:  . $_POST[name] . \n .
            Captain:  . $_POST[captain] . \n .
            Gender:  . $_POST[gender] . \n .
            Dorm:  . $_POST[dorm];

        // send mail and if it doesn't work kill the connection to the host.
        if ($mail->Send() == false)
        {
            die($mail->ErrInfo);
        }
    }
    else
    {
    	// send user to this url if any fields were empty.
        header(Location: info@localhost/src8m/froshims/froshims-3.php);
        exit;
    }
?>

<!DOCTYPE html>

<html>
    <head>
        <title>Frosh IMs</title>
    </head>
    <body>
        You are registered!  (Really.)
    </body>
</html>

This is an example of a php program that counts the number of times you have visted it's page. HTTP does not allow us a constant connection but this script allows us to create the illusion of constant state.

<?php

    // enable sessions
    // creates a bucket that stores values to be reaccessed later. This is done in the form of cookies and relies on the user keeping them.
    session_start();

    // check counter
    if (isset($_SESSION[counter]))
    {
        $counter = $_SESSION[counter];
    }
    else
    {
        $counter = 0;
    }

    // increment counter
    $_SESSION[counter] = $counter + 1;

?>

<!DOCTYPE html>

<html>
    <head>
        <title>counter</title>
    </head>
    <body>
        You have visited this site <?= $counter ?> time(s).
    </body>
</html>

Using bootstrap like this can allow us to use prewritten CSS: <link href=bootstrap/css/bootstrap.min.css rel=stylesheet/>

MVC with require and functions

If no url is specified for a default page then webservers will use index.php. This file can be just hardcoded html.

In this version of index.php we include php:

// require is like include in c and just uses header.php and footer in place of hardcoded html.
<?php require(header.php); ?>

<ul>
    <li><a href=lectures.php>Lectures</a></li>
    <li><a href=info@cdn.cs50.net/2014/fall/lectures/0/w/syllabus/syllabus.html>Syllabus</a></li>
</ul>

<?php require(footer.php); ?>


If you wanted a more advanced version you could add a helpers file:

<?php require(includes/helpers.php); ?>
// make the header with the header template and give the title of CS50.
<?php render(header, [title => CS50]); ?>

<ul>
    <li><a href=lectures.php>Lectures</a></li>
    <li><a href=info@cdn.cs50.net/2014/fall/lectures/0/w/syllabus/syllabus.html>Syllabus</a></li>
</ul>

<?php render(footer); ?>


This helpers file looks like this:

<?php

    /**
     * Renders template.
     */
    // functions in php do not need return types. data = [], says that if nothing comes as that parameter then give it an empty array.
    function render($template, $data = [])
    {
    	// the . in php is for concatenating strings.
        $path = $template . .php;
        if (file_exists($path))
        {
        	// use extract to pull out keys and create variables out of them.
            extract($data);
            require($path);
        }
    }

?>

index.php grabs the file helpers.php at it's path and uses the function within to populate the page based on the template and associatave array.
With MVC all these are seperated into files. The more advanced version is there to dry the code.

MVC is model, view, controller. The controller is we keep are programming logic (php), View is in charge of what is seen so CSS/HTML and model is data, SQL.

SUPER GLOBALS AND COOKIES

superglobals:

$_COOKIE - data that a server stores on your computer to remember you in the future. Set-Cookie populates this.

$_GET - variables from the query string.

$_POST - stores forms sent by POST method.

$_SERVER - gives you details about the server,

$_SESSION - Stores user information in browser across all sites until the browser is closed. Session_start() means a cookie will be sent around.

$_FILES - stores files.

All super globals are associative arrays.



INTRO TO SQL (Structure Querey Language)

SQL has fundamental statements like:

DELETE - removes data

INSERT - adds rows

UPDATE - changes rows

SELECT - gets rows (returns an array of rows)

The reccomended tool for working with SQL is phpMyAdmin. It administers a MySQL server.
A table is like a spreadsheet with it's own rows and columns. You use SELECT * FROM `users` will access the table users and get * (all objects) from it.
DELETE FROM `users` WHERE username = zamayla iterates through users(table) -> username(key) and deletes where value is zamyla.
INSERT INTO `users` (username, hash) VALUES('gabe', 'TODO') Inserts username gabe into the user table with a hash value of TODO.

CREATING A TABLE

SQL data types

CHAR

VARCHAR

INT

BIGINT

DECIMAL

DATETIME

When creating a table in phpMyAdmin. It allows you to select datatypes for each row.
An unsigned int for attributes will mean that it has to be nonnegative.
By selecting PRIMARY for id you can optimize the speed of the database retrieval because int is faster than string to access.
A_I means auto increment and should be checked so the id column is updated.
VARCHAR allows variable length values for dynamic tabel population.
UNIQUE prevents multiple values from being the same which is good for username to prevent confusion. Cannont insert row with same username as another.
INDEX will index a field to increase speed of searches.
FULLTEXT specifies the possibility of full text searches.

MVC WITH TEXTING

There are three directories in the distro code:
public - files that users can interact with via html fields. MODEL
templates - reusable components and the VIEW component where aesthetics are stored.
includes - programming logic or CONTROLLER components

REGISTERING

<?php

    require(../includes/config.php);
    // check values of submission form and inform user if they were stored.
    if (empty($_POST[name]))
    {
    	// function defined in config to display message.
        apologize(Missing name);
    }
    else if (empty($_POST[number]))
    {
        apologize(Missing number);
    }
    // if proper input recieved, store it in table and notify user. ? marks are place holders to add values later.
    query(INSERT INTO users (name, number) VALUES(?, ?), $_POST[name], $_POST[number]);

    render(success.php);
?>

TEXTING

#!/usr/bin/env php
<?php
	// include config file
    require(includes/config.php);
    // get all fields from users as an array of associative arrays
    $rows = query(SELECT * FROM users);
    // iterate through associatve array and access values of associative arrays to print.
    foreach ($rows as $row)
    {
        printf(Name is %s, and number is %s\n, $row[name], $row[number]);
        text($row[number], $row[carrier], Don't screw up this year);
    }

?>


In functions.php:

    /**
     * Sends a text. Returns true on success, else false.
     */
    function text($number, $carrier, $message)
    {
        // determine address (switch cases in PHP can take strings)
        switch ($carrier)
        {
            case AT&T:
                $address = {$number}@txt.att.net;
                break;

            case Verizon:
                $address = {$number}@vtext.com;
                break;
        }
        if (!isset($address))
        {
            return false;
        }

        // instantiate mailer
        $mail = new PHPMailer();

        // use SMTP
        $mail->IsSMTP();
        $mail->Host = smtp.fas.harvard.edu;
        $mail->Port = 587;
        $mail->SMTPSecure = tls;

        // set From:
        $mail->SetFrom(jharvard@cs50.harvard.edu);

        // set To:
        $mail->AddAddress($address);

        // set body
        $mail->Body = $message;

        // send text
        if ($mail->Send())
        {
            return true;
        }
        else
        {
            return false;
        }
    }
With AT&T and Verizon you can send a text to a phone with {$number}@vtext.com. You email this way and it goes to that number as a text message.
The code above is buggy and did not work.